-----------------------------------------------------------------
-- Copyright (c) 2019 Igor Suntsev
-- http://dragosha.com
-- MIT License
-----------------------------------------------------------------

-- Hero controller
-- Gamepad and Keys Binding

local cam = require "rendercam.rendercam"
local param = require "main.param"
local scene = require "main.scene"
local broadcast = require "ludobits.m.broadcast"

local rpg = require "main.m.rpg"

local input = require "in.state"
local mapper = require "in.mapper"
local triggers = require "in.triggers"

local NONE = hash("NONE")
local IDLE = hash("idle")
local WALK = hash("walk")
local DODGE = hash("dodge")
local PUSH = hash("push")
local JERK = hash("jerk")
local DASH = hash("dash")
local SLASH = hash("slash")
local HIT = hash("hit")
local LEFT = -1
local RIGHT = 1

local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local TRIGGER_RESPONSE = hash("trigger_response")

local SPINE_EVENT = hash("spine_event")
local SPLASH = hash("splash")
local ENEMY = hash("enemy")
local TRIGGERS = hash("triggers")

local function reset(self)
	self.vel = vmath.vector3()
	self.position = go.get_position()
	self.hero_id = 1
	self.state = IDLE
	self.direction = RIGHT
	self.dodge_ready = true
	self.correction = vmath.vector3()
	self.other_mass = vmath.vector3()
	self.prev_other_mass = vmath.vector3()

	self.combo = 0
	self.combo_timer = 0

	self.monsters_around = {}
	self.triggers = {}
	self.model = "herospine#spinemodel"
end

function init(self)

	reset(self)
	----
	input.acquire()
	self.input = input.create()
	mapper.bind(triggers.KEY_LEFT, param.LEFT, self.hero_id)
	mapper.bind(triggers.KEY_RIGHT, param.RIGHT, self.hero_id)
	mapper.bind(triggers.KEY_UP, param.UP, self.hero_id)
	mapper.bind(triggers.KEY_DOWN, param.DOWN, self.hero_id)
	--mapper.bind(triggers.KEY_A, param.LEFT, self.hero_id)
	--mapper.bind(triggers.KEY_D, param.RIGHT, self.hero_id)
	--mapper.bind(triggers.KEY_W, param.UP, self.hero_id)
	--mapper.bind(triggers.KEY_S, param.DOWN, self.hero_id)
	mapper.bind(triggers.KEY_C, param.DODGE, self.hero_id)
	--mapper.bind(triggers.KEY_V, param.DASH, self.hero_id)
	mapper.bind(triggers.KEY_X, param.SLASH, self.hero_id)
	mapper.bind(triggers.KEY_B, param.B, self.hero_id)
	mapper.bind(triggers.GAMEPAD_LPAD_LEFT, param.LEFT, self.hero_id)
	mapper.bind(triggers.GAMEPAD_LPAD_RIGHT, param.RIGHT, self.hero_id)
	mapper.bind(triggers.GAMEPAD_LPAD_UP, param.UP, self.hero_id)
	mapper.bind(triggers.GAMEPAD_LPAD_DOWN, param.DOWN, self.hero_id)
	mapper.bind(triggers.GAMEPAD_RPAD_DOWN, param.DODGE, self.hero_id)
	--mapper.bind(triggers.GAMEPAD_RPAD_UP, param.DASH, self.hero_id)
	mapper.bind(triggers.GAMEPAD_RPAD_LEFT, param.SLASH, self.hero_id)
	mapper.bind(triggers.GAMEPAD_RPAD_RIGHT, param.B, self.hero_id)
	mapper.bind(triggers.MOUSE_BUTTON_1, param.CLICK, self.hero_id)

	-- msg.post("#label", "disable")
	msg.post("herospine", "disable")

	broadcast.register(param.LEVELLOADED)
	broadcast.register(param.GOTO)
	cam.follow(go.get_id())

	msg.post(param.virtual_gamepad_url, "register")
end

function final(self)
	broadcast.unregister(param.LEVELLOADED)
	broadcast.unregister(param.GOTO)
	cam.unfollow(go.get_id())
	msg.post(param.virtual_gamepad_url, "unregister")
end

local custom_easing_value = { 0, 1, 1, 1, 0, 1, 1, 1, 0 }
local custom_easing = vmath.vector(custom_easing_value)

local function change_state(self,state)

	local function complete(self)
		self.special = false
		self.state = NONE
	end

	if self.state ~= state then particlefx.stop("#dust") end
	if state == WALK and self.state ~= WALK then 
		self.state = WALK
		spine.play_anim(self.model, "run", go.PLAYBACK_LOOP_FORWARD, { blend_duration = 0.25, playback_rate = 1.1 })

	elseif state == PUSH and self.state ~= PUSH then 
		self.state = PUSH
		particlefx.play("#dust")
		spine.play_anim(self.model, "push", go.PLAYBACK_LOOP_FORWARD, { blend_duration = 0.1 })

	elseif state == IDLE and self.state ~= IDLE then 
		self.state = IDLE
		spine.play_anim(self.model, "idle", go.PLAYBACK_LOOP_FORWARD, { blend_duration = 0.2 })

	elseif state == DODGE and self.state ~= DODGE then 
		self.state = DODGE
		particlefx.play("#dust")
		local playback = self.backward and go.PLAYBACK_ONCE_BACKWARD or go.PLAYBACK_ONCE_FORWARD
		spine.play_anim(self.model, "dodge", playback, { blend_duration = 0.25, playback_rate = 1.5 }, complete)

	elseif state == DASH and self.state ~= DASH then 
		self.state = DASH
		spine.play_anim(self.model, "dash", go.PLAYBACK_ONCE_FORWARD, { blend_duration = 0.25, playback_rate = 1 }, complete)

	elseif state == HIT and self.state ~= HIT then 
		self.state = HIT
		go.animate(self.model, "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 0, 0, 4), custom_easing, .3)
		spine.play_anim(self.model, "hit", go.PLAYBACK_ONCE_FORWARD, { blend_duration = 0.1, playback_rate = 1.1 }, complete)

	elseif state == SLASH and self.state ~= SLASH then 
		self.state = SLASH
		local anims = { "slash", "jerk", "kick", "slash" }
		local anim = anims[math.random(#anims)]
		if self.combo > 3 then 
			anim = "powerslash"
		end

		spine.play_anim(self.model, anim, go.PLAYBACK_ONCE_FORWARD, { blend_duration = 0.1, playback_rate = 1.1 }, complete)
	end

end

----
local function on_spine_event(self, message)

	--print(message.event_id)
	local m = {}
	if message.event_id == SPLASH then
		for k, v in pairs( self.monsters_around ) do
			local pos = go.get_position(k)
			if 	pos.x > self.position.x and self.direction == RIGHT or
				pos.x < self.position.x and self.direction == LEFT then
				table.insert( m, 1, k )
			end
		end
	end
	
	if #m > 0 then
		local monster_id = m[math.random( 1, #m)]
		msg.post(monster_id, param.DODAMAGE, {
			hero_id = self.hero_id,
			id = go.get_id(),
			value = 10 + self.combo * 10,
			type = rpg.PHYSICAL,
			})

		self.lastTarget = monster_id

	else
		self.combo=0
	end

end

----
local function on_damage_event(self, message)
	--print("Hero get damage from", message.id,":", message.value, "by", message.type)
	if self.monsters_around[message.id] then
		self.special = true
		change_state(self, HIT)
		cam.shake(10, 0.2)

	elseif message.type == rpg.MAGIC then
		self.special = true
		change_state(self, HIT)
		cam.shake(10, 0.2)

	end

end

----
function update(self, dt)

	local walking = false
	local pushing = false

	self.combo_timer = self.combo_timer + dt
	
	
	if self.dodge_ready and not self.special then
		if self.input.is_pressed(param.DODGE) then


		local direction = self.direction
		--[[self.backward = nil
		if self.input.is_pressed(param.LEFT) then 
			if direction ~= LEFT then
				direction = LEFT
				self.backward = true
			end
		elseif self.input.is_pressed(param.RIGHT) then
			if direction ~= RIGHT then
				direction = RIGHT
				self.backward = true
			end
		end]]--

			self.vel.x = self.vel.x + direction * 1500
			self.special = true
			self.dodge_ready = false
			change_state(self, DODGE)
		end
	else
		if self.input.is_pressed(param.DODGE) == false then
			self.dodge_ready = true
		end
	end

	----
	if self.dodge_ready and not self.special then
		if self.input.is_pressed(param.DASH) then
			self.vel.x = self.vel.x + self.direction * 1500
			self.special = true
			self.dodge_ready = false
			change_state(self, DASH)
		end
	else
		if self.input.is_pressed(param.DASH) == false then
			self.dodge_ready = true
		end
	end
	----

	if self.dodge_ready and not self.special then
		if self.input.is_pressed(param.SLASH) then
			self.vel.x = self.vel.x + self.direction*0
			self.special = true
			self.dodge_ready = false

			if self.combo_timer < 1.2 then
				self.combo = self.combo + 1
			else
				self.combo = 0
			end
			self.combo_timer = 0

			change_state(self, SLASH)
		end
	else
		if self.input.is_pressed(param.SLASH) == false then
			self.dodge_ready = true
		end
	end
	
	------------ DEBUG
	local dbg = ""
	
	if not self.special then
		if self.input.is_pressed(param.LEFT) then 
			self.vel.x = -375
			walking = true
			self.direction = LEFT

			dbg = dbg .. "<"
		elseif self.input.is_pressed(param.RIGHT) then
			self.vel.x = 375
			walking = true
			self.direction = RIGHT

			dbg = dbg .. ">"
		end

		if self.input.is_pressed(param.UP) then 
			self.vel.y = 250
			walking = true

			dbg = dbg .. "^"
		elseif self.input.is_pressed(param.DOWN) then
			self.vel.y = -250
			walking = true

			dbg = dbg .. "_"
		end
	end
	
	label.set_text("#label", dbg)
		

	-----
	if walking then go.cancel_animations(".", "position") end


	local velocity = self.vel * dt
	if self.correction.x > 0 and velocity.x < 0 then
		velocity.x = 0 --self.correction.x*dt
		self.correction.x = 0
	end
	if self.correction.x < 0 and velocity.x > 0 then
		velocity.x = 0 --self.correction.x*dt
		self.correction.x = 0
	end
	if self.correction.y < 0 and velocity.y > 0 then
		velocity.y = 0
		self.correction.y = 0
	end
	if self.correction.y > 0 and velocity.y < 0 then
		velocity.y = 0
		self.correction.y = 0
	end

	local friction = 0.92
	if self.state == WALK then 
		friction = 0.9
	elseif self.state == DODGE then 
		friction = 0.92
	elseif self.state == IDLE then 
		friction = 0.5
	end
	self.vel.x = self.vel.x * friction
	self.vel.y = self.vel.y * friction
	if math.abs(self.vel.x) < 1 then self.vel.x = 0 end
	if math.abs(self.vel.y) < 1 then self.vel.y = 0 end

	------------
	if self.other_mass.z > 0 then 

		local mass = self.other_mass.z * 2

		if  math.abs(self.other_mass.x) > math.abs(self.prev_other_mass.x)
		or  math.abs(self.other_mass.y) > math.abs(self.prev_other_mass.y) then
			self.prev_other_mass.z = self.prev_other_mass.z + 1
			mass = mass * self.prev_other_mass.z
		else
			self.prev_other_mass.z = 0
		end


		if math.abs(self.other_mass.x) > 0 then velocity.x = velocity.x / mass end
		if math.abs(self.other_mass.y) > 0 then velocity.y = velocity.y / mass end

		self.prev_other_mass.x = self.other_mass.x
		self.prev_other_mass.y = self.other_mass.y
		self.other_mass.z = 0
		self.other_mass.x = 0
		self.other_mass.y = 0

		pushing = true
	end


	-------------
	-- position

	self.position = go.get_position()
	self.position = self.position + velocity
	self.position.z = self.position.y * param.kZ
	go.set_position(self.position)


	-------------
	-- view

	if not self.special then 
		if walking then
			if self.direction == LEFT then 
				go.set_rotation(vmath.quat_rotation_y(math.pi), "herospine")
				go.set_rotation(vmath.quat_rotation_y(math.pi), "triggers")
			elseif self.direction == RIGHT then
				go.set_rotation(vmath.quat_rotation_y(0), "herospine")
				go.set_rotation(vmath.quat_rotation_y(0), "triggers")
			end

			if pushing then 
				change_state(self, PUSH)
			else
				change_state(self, WALK)
			end
		else
			change_state(self, IDLE)
			--go.animate("camera", "position.z", go.PLAYBACK_ONCE_FORWARD, self.position.z+600, go.EASING_INOUTSINE, 1)
		end
	end
end

local function press_b(self)
	--print("B")
	for k, v in pairs( self.triggers ) do
		msg.post(k, param.GOTO, { hero_id = self.hero_id })
	end
end

function on_message(self, message_id, message, sender)

	if message_id == CONTACT_POINT_RESPONSE then
		--ph.handle_geometry_contact(self.correction, message.normal, message.distance)
		if message.other_group == param.SOLID then
			if message.distance > 0 then
				-- First, project the accumulated correction onto
				-- the penetration vector
				local proj = vmath.project(self.correction, message.normal * message.distance)
				if proj < 1 then
					-- Only care for projections that does not overshoot.
					local comp = (message.distance - message.distance * proj) * message.normal
					-- Apply compensation
					go.set_position(go.get_position() + comp)
					-- Accumulate correction done
					self.correction = self.correction + comp
			  	end
			end

		elseif message.other_group == param.DEFAULT then
			--print(message.other_mass)
			self.other_mass = message.normal * message.distance
			self.other_mass.z = message.other_mass
		end

	elseif message_id == COLLISION_RESPONSE then

	elseif message_id == TRIGGER_RESPONSE then 
		--pprint(message)
		if message.other_group == ENEMY then
			self.monsters_around[message.other_id] = message.enter and true or nil
			--pprint(self.monsters_around)

		elseif message.other_group == TRIGGERS then
			--[[local url=msg.url(message.other_id)
			url.fragment="trigger"

			local value=go.get(url, "value")
			print(message.other_id, value)]]--

			self.triggers[message.other_id] = message.enter and true or nil
		end
		

	elseif message_id == SPINE_EVENT then
		on_spine_event(self,message)

	elseif message_id == param.DODAMAGE then
		on_damage_event(self, message)

	elseif message_id == param.GOTO then
		msg.post("herospine", "disable")

	elseif message_id == param.LEVELLOADED then

		if message.targetpos then
			go.set_position(message.targetpos)
		end

		go.set(self.model, "tint", vmath.vector4(1, 1, 1, 0))
		msg.post("herospine", "enable")
		go.animate(self.model, "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 1, 1), go.EASING_LINEAR, 0.5)
		reset(self)
		timer.delay(0.2, false, 
			function()
				broadcast.send(param.TARGET_ID, { id = go.get_id() }) 
			end)

	----------------------------------------------------
	-- VIRTUAL pad messages:
	elseif message_id == param.ANALOG then
		-- update state of all directions in one message
		local threshold = 0.2
		message.pressed = message.x < -threshold
		message.released = not message.pressed 
		-- There is no repeat state at in.state module, so we can just turn on/off for each KEY
		self.input.on_input(param.LEFT, message)

		message.pressed = message.x > threshold
		message.released = not message.pressed
		self.input.on_input(param.RIGHT, message)

		message.pressed = message.y < -threshold
		message.released = not message.pressed
		self.input.on_input(param.DOWN, message)

		message.pressed = message.y > threshold
		message.released = not message.pressed
		self.input.on_input(param.UP, message)

		--print(message.x,message.y,message.pressed,message.released)

	elseif message_id == param.BUTTON_B and message.released then
		print("virtual B")
		press_b(self)

	elseif message_id == param.BUTTON_A then
		self.input.on_input(param.DODGE, message)

	elseif message_id == param.BUTTON_X then
		self.input.on_input(param.SLASH, message)

	end
end

function on_input(self, action_id, action)
	
	local mapped_action_id = mapper.on_input(action_id, self.hero_id)
	self.input.on_input(mapped_action_id, action)

	-- label.set_text("#label", tostring(action_id))
	local threshold = 0.45

	if  action_id == triggers.GAMEPAD_LSTICK_LEFT then
		action.pressed = action.value > threshold
		action.released = not action.pressed
		self.input.on_input(param.LEFT, action)

	elseif  action_id == triggers.GAMEPAD_LSTICK_RIGHT then
		action.pressed = action.value > threshold
		action.released = not action.pressed
		self.input.on_input(param.RIGHT, action)

	elseif  action_id == triggers.GAMEPAD_LSTICK_UP then
		action.pressed = action.value > threshold
		action.released = not action.pressed
		self.input.on_input(param.UP, action)

	elseif  action_id == triggers.GAMEPAD_LSTICK_DOWN then
		action.pressed = action.value > threshold
		action.released = not action.pressed
		self.input.on_input(param.DOWN,action)
	end
	
	if action_id == triggers.KEY_P and action.released then 
		msg.post('@system:', 'toggle_profile')
		
	elseif action_id == triggers.KEY_O and action.released then 
		msg.post('@system:', 'toggle_physics_debug')
	
	elseif action_id == triggers.KEY_A and action.released then 
		msg.post('@render:', 'ambient')

	elseif mapped_action_id == param.B and action.released then
		--print("Button B")
		press_b(self)

	end

end