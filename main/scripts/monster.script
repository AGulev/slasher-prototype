-----------------------------------------------------------------
-- Copyright (c) 2019 Igor Suntsev
-- http://dragosha.com
-- MIT License
-----------------------------------------------------------------

-- Very basic monster's AI
-- Part of a logic code is hidden in 'routine' module

local param = require "main.param"
local scene = require "main.scene"
local broadcast = require "ludobits.m.broadcast"
local routine = require "main.m.routine"
local rpg = require "main.m.rpg"

local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local SPINE_EVENT = hash("spine_event")
local SLASH =  hash("slash")
local FIRE = hash("fire")


-- url to spine model
go.property("spineurl", msg.url())
-- max visible radius
go.property("maxRay", 600)
go.property("attackRadius", 90)
go.property("melee", true)
go.property("bullet", msg.url())
go.property("behaviour", hash(""))
-- unit default velocity
go.property("velocity", vmath.vector3(200,100,0))

---
go.property("hp", 100)





----
local function idle_solver(self)
	self.vel.x = 0
	self.vel.y = 0

	if  self.on_position then
		self.special = true
		routine.check_direction(self)
		routine.model_flip(self)
		routine.change_state(self, routine.ATTACK)

	elseif self.router.target_pos then
		routine.change_state(self, routine.PURSUIT)
	end
end

----
local function pursuit_solver(self)

	local target_pos = self.router.target_pos
	if target_pos then 
		local position = go.get_position()
		--position.z = 0
		--target_pos.z = 0
		--local len = vmath.length(position - target_pos)

		self.vel.x = 0
		self.vel.y = 0

		self.walking = false

		local xD = self.attack_radius_x
		local yD = self.attack_radius_y
		if self.router.wayPoint then xD = 0; yD = 0 end

		--local aX = math.abs( target_pos.x - position.x )
		--local aY = math.abs( target_pos.y - position.y )
		local velocity_x = self.velocity.x
		local velocity_y = self.velocity.y
		
			if target_pos.x < position.x - xD then 
				self.vel.x = -velocity_x
				self.direction = routine.LEFT
				self.walking = true

			elseif target_pos.x > position.x + xD then
				self.vel.x = velocity_x
				self.direction = routine.RIGHT
				self.walking = true
			end

			if target_pos.y > position.y + yD then 
				self.vel.y = velocity_y
				self.walking = true

			elseif target_pos.y < position.y - yD then
				self.vel.y = -velocity_y
				self.walking = true
			end

			--routine.modelFlip(self)

		if not self.walking and self.on_position then 
			--self.on_position = true 
			routine.change_state(self, routine.IDLE)
		end

	else
		routine.change_state(self, routine.IDLE)
	end

end

----
local function wait_solver(self)

	local t = self.state_options and self.state_options.timer or 1
	if self.state_timer > t then
		routine.change_state(self, routine.PURSUIT, { nostop = true })
	end

end


local function on_stop_event(self, message, sender)
	
	if self.state == routine.PURSUIT then
		routine.change_state(self, routine.WAIT, { timer = 1 + math.random() * 2 })
	end

end

----
local function attack_solver(self)

end

local function hit_solver(self)

end

----
local function ai_solver(self)

	local dbg = self.hp
	label.set_text("#label", dbg)

	if self.state == routine.NONE then 
		routine.change_state(self, routine.IDLE)

	elseif self.state == routine.IDLE then
		idle_solver(self)

	elseif self.state == routine.PURSUIT then
		pursuit_solver(self)

	elseif self.state == routine.ATTACK then
		attack_solver(self)

	elseif self.state == routine.WAIT then
		wait_solver(self)

	elseif self.state == routine.HIT then
		hit_solver(self)

	end
end

----
local function on_damage_event(self, message)

	if self.state == routine.DIE then return end
	if self.state == routine.ATTACK and self.state_timer > 0.5 then
		return
	end

	self.hp = self.hp - message.value
	if self.hp <= 0 then 
		routine.change_state(self, routine.DIE)		
	else
		routine.change_state(self, routine.HIT)
	end

end

----
local function on_spine_event(self, message)


	if message.event_id == SLASH then

		if self.melee then
			local pos = self.router.target_pos
			if pos then
				if 	pos.x > self.position.x and self.direction == routine.RIGHT or
					pos.x < self.position.x and self.direction == routine.LEFT then
					--print("Attack", self.router.target_id, pos, self.position, self.direction)
					msg.post(self.router.target_id, param.DODAMAGE, {
						id = self.ID,
						value = 10,
						type = rpg.PHYSICAL
					})
				end
			end

		else
			local firebone = spine.get_go(self.spineurl, "fireposition")
			local fireposition = go.get_world_position(firebone)
			fireposition.z = fireposition.z + 10

			local pos = go.get_position(self.router.target_id)
			self.router.target_pos = pos
			routine.check_direction(self)
			routine.model_flip(self)

			if pos and fireposition then
				pos.y = pos.y + 50
				local angle = -math.atan2(pos.x - fireposition.x, pos.y - fireposition.y)
				local quat = vmath.quat_rotation_z(angle)
				self.weapon_angle = quat

				factory.create(self.bullet, fireposition, quat, {
					speed = 650,
					damage = 1,
					type = rpg.MAGIC 
				})

				print("fire!", self.bullet)
			end
		end
	end
end

----
function init(self)
	self.vel = vmath.vector3()
	self.position = go.get_position()
	self.ID = go.get_id()
	self.state = routine.NONE
	self.direction = routine.RIGHT
	self.correction = vmath.vector3()
	--self.maxRay = 600

	self.seek_delay = 0.8
	self.ai_delay = 0.1

	print(">", msg.url(), self.attackRadius)
	self.spineurl = self.spineurl or "spine#spinemodel"
	
	--local shadow = spine.get_go(self.spineurl, "shadow")
	--msg.post("shadow", "set_parent", { parent_id = shadow })

	self.left_rotation = 0
	self.right_rotation = math.pi
	self.attack_radius_x = 90
	self.attack_radius_y = 15
	self.state_timer = 0

	self.correction = vmath.vector3()
	self.vel = vmath.vector3()
	self.other_mass = vmath.vector3()
	self.prev_other_mass = vmath.vector3()

	self.enemycontact = {}
	self.router = {}


	broadcast.register(param.TARGET_ID,
		function(message) 
			--pprint(message)
			self.router.target_id = message.id
			self.router.seek_id = timer.delay(self.seek_delay, true, routine.target_seek)
		end)

	-- call ai_solver every self.ai_delay sec
	self.ai_id = timer.delay(self.ai_delay + (math.random() *0.1), true, ai_solver)
	
	scene.monsters[self.ID] = { id = self.ID, state = self.state }

	--if not sys.get_engine_info().is_debug then
		msg.post("#label", "disable")
	--end
	
	--broadcast.register(param.PLEASESTOP)
end

function final(self)
	broadcast.unregister(param.TARGET_ID)
	self.enemycontact = nil

	scene.monsters[self.ID] = nil
	routine.on_position[self.ID] = nil

end


function update(self, dt)

	if self.die then return end
	
	self.state_timer = self.state_timer + dt
	local velocity = self.vel * dt

	if self.correction.x > 0 and velocity.x < 0 then
		velocity.x = 0
		self.correction.x = 0
	end

	if self.correction.x < 0 and velocity.x > 0 then
		velocity.x = 0
		self.correction.x = 0
	end

	if self.correction.y < 0 and velocity.y > 0 then
		velocity.y = 0
		self.correction.y = 0
	end

	if self.correction.y > 0 and velocity.y < 0 then
		velocity.y = 0
		self.correction.y = 0
	end

	if self.other_mass.z > 0 then 

		local mass = self.other_mass.z * 2

		if math.abs(self.other_mass.x) > math.abs(self.prev_other_mass.x)
		or math.abs(self.other_mass.y) > math.abs(self.prev_other_mass.y) then
			self.prev_other_mass.z = self.prev_other_mass.z + 1
			mass = mass * self.prev_other_mass.z
		else
			self.prev_other_mass.z = 0
		end


		if math.abs(self.other_mass.x) > 0 then velocity.x = velocity.x / mass end
		if math.abs(self.other_mass.y) > 0 then velocity.y=velocity.y / mass end

		self.prev_other_mass.x = self.other_mass.x
		self.prev_other_mass.y = self.other_mass.y
		self.other_mass.z = 0
		self.other_mass.x = 0
		self.other_mass.y = 0
	end

	--if self.contact then	velocity.x = 0; velocity.y = 0; self.contact = nil; end
	---
	----------
	-- position

	self.position = go.get_position()
	self.position = self.position + velocity
	self.position.z = self.position.y * param.kZ
	go.set_position(self.position)


	-------------
	-- view

	
end

function on_message(self, message_id, message, sender)
	if broadcast.on_message(message_id, message, sender) then
		return
	end

	if message_id == param.PLEASESTOP then
		if self.enemycontact[message.id] and self.enemycontact[message.id] > message.order then
			on_stop_event(self, message, sender)
		end

	elseif message_id == param.DODAMAGE then
		on_damage_event(self, message)

	elseif message_id == SPINE_EVENT then
		on_spine_event(self, message)

	end

	if message_id == CONTACT_POINT_RESPONSE then
		if message.other_group == param.SOLID then
			if message.distance > 0 then
		   		-- First, project the accumulated correction onto
		   		-- the penetration vector
		   		local proj = vmath.project(self.correction, message.normal * message.distance)
		   		if proj < 1 then
		   		  	-- Only care for projections that does not overshoot.
		   			local comp = (message.distance - message.distance * proj) * message.normal
		   		  	-- Apply compensation
		   		  	-- go.set_position(go.get_position() + comp)
		   		  	-- Accumulate correction done
		   		  	self.correction = self.correction + comp
		   		end
			end
			
		elseif message.other_group == param.ENEMY then
			if self.state == routine.PURSUIT then
				local order = scene.order()
				self.enemycontact[message.other_id] = order
				msg.post(message.other_id, param.PLEASESTOP, { id = self.ID, order = order })
			end

		elseif message.other_group == param.DEFAULT then
			--print(message.other_mass)
			self.other_mass = message.normal * message.distance
			self.other_mass.z = message.other_mass
		end

	elseif message_id == COLLISION_RESPONSE then
	end

end


function on_reload(self)
end
